<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */




namespace Rawsocket\Pcap;


/* PHP Proxy Classes */
class Packet {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_SimplePcap_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_SimplePcap_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __toString() {
		return Packet___toString($this->_cPtr);
	}

	function getSecondsOffset() {
		return Packet_getSecondsOffset($this->_cPtr);
	}

	function getMicroSecondsOffset() {
		return Packet_getMicroSecondsOffset($this->_cPtr);
	}

	function getRealLen() {
		return Packet_getRealLen($this->_cPtr);
	}

	function getCapturedLen() {
		return Packet_getCapturedLen($this->_cPtr);
	}

	function getData() {
		return Packet_getData($this->_cPtr);
	}

	function __construct($capturedLen=0,$realLen=0,$secOffset=0,$uSecOffset=0,$data=null) {
		if (is_resource($capturedLen) && get_resource_type($capturedLen) === '_p_SimplePcapNs__Packet') {
			$this->_cPtr=$capturedLen;
			return;
		}
		$this->_cPtr=new_Packet($capturedLen,$realLen,$secOffset,$uSecOffset,$data);
	}
}

class SimplePcap {
	public $_cPtr=null;
	protected $_pData=	array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_SimplePcap_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_SimplePcap_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function close() {
		SimplePcap_close($this->_cPtr);
	}

	static function findAllDevs() {
		return SimplePcap_findAllDevs();
	}

	function send($buf) {
		return SimplePcap_send($this->_cPtr,$buf);
	}

	function get() {
		$r=SimplePcap_get($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Packet($r);
		}
		return $r;
	}

	function __construct($deviceName,$filterString=null,$snapLen=null,$timeout=null) {
		if (is_resource($deviceName) && get_resource_type($deviceName) === '_p_SimplePcapNs__SimplePcap') {
			$this->_cPtr=$deviceName;
			return;
		}
		$this->_cPtr=new_SimplePcap($deviceName,$filterString,$snapLen,$timeout);
	}
}


?>
